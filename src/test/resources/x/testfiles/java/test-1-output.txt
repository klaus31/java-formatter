package x.ctrl;

import org.junit.Test; // wow
import x.java.SourceCodeFileFormatter4JavaDefault;
import java.io.IOException;
// it is a foo
import java.util.List;
// it is a bar
import static org.hamcrest.Matchers.is;
// it is a foo
// and it is a bar
import static org.junit.Assert.assertThat;
/*
very interesting import
*/
import static x.TestFileReadIn.calcPath;
import static x.TestFileReadIn.read;
/**
* another good place to allow comments
*/
@ClassAnnotationA
@WebFault(faultBean="", messageName="")
public class A1 {

    private List<String> a201612201919;

    // this is b
    private final List<String> b201612201919;

    // c
    private final static List<String> c201612201919;

    /* d */
    private static final List<String> d201612201919;

    /**
    e
    */
    private List<?> e201612201919;
    protected List<String> f201612201919;
    protected final List<String> g201612201919;
    protected final static List<String> h201612201919;
    protected static final List<String> i201612201919;
    protected List<?> j201612201919;
    public Map<String, String> k201612201919;
    public final List<String> l201612201919;
    public final static List<String> m201612201919;
    public static final List<String> n201612201919;
    public List<?> o201612201919;
    Map<String, String> p201612201919;
    final List<String> q201612201919;
    final static List<String> r201612201919;
    static final List<String> s201612201919;
    List<?> t201612201919;
    Map<String, String> u201612201919 = new HashMap<>(7);
    final List<String> v201612201919 = new HashMap<>(7); // a
    final static List<String> w201612201919 = new HashMap<>(7);
    static final List<String> x201612201919 = new HashMap<>(7);
    List<?> y201612201919 = new HashMap<>(7);
    String str = (5 - 1 < 6) ? "hi" : ho;
    List<Foo<Bar>, Bar<Foo<?>>> plump;

    // Zwei einsame Menschen im Schnee
    @AnnotationA
    // Wolln Schneemann baun
    @AnnotationB /* huhu */
    @AnnotationC("a1612201340") // blue
    /*Zwei einsame Menschen im Schnee wolln nicht nur Schneemann baun*/
    public void a2() throws A3 {
        a4("a5", "a6");
    }

    private void a7(String a8, String a9) throws A10 {
        String inputFileName = fileNameKey + "-input";
        String expectedOutputFileName = fileNameKey + "-expected-output"; // _
        SourceCodeFile sourceCodeFile = new SourceCodeFile(calcPath(language, inputFileName));
        SourceCodeFileFormatter formatter = new SourceCodeFileFormatter4JavaDefault(sourceCodeFile);

        // such a great line of code
        /* <3 */
        List<String> actualOutputLines = formatter.createOutputLines();
        actualOutputLines.forEach(System.out::println);
        actualOutputLines.forEach(str -> System.out.println(str + "-"));
        actualOutputLines.forEach(str -> {
            System.out.println(str + "-");
        });
        List<String> expectedOutputLines = read("java", expectedOutputFileName);
        for (int i = 0; i < expectedOutputLines.size(); i++) {
            String debugMessage = expectedOutputFileName + " at line " + (i + 1) + ":\nActual: \"" + actualOutputLines.get(i) + "\"\nShould: \"" + expectedOutputLines.get(i);
            assertThat(debugMessage, actualOutputLines.get(i), is(expectedOutputLines.get(i)));
        }
    }
}